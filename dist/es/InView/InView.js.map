{"version":3,"file":"InView.js","sources":["../../../src/InView/InView.js"],"sourcesContent":["import React from 'react'\nimport { useInView } from 'react-intersection-observer'\n\nconst InView = ({ rootMargin = '500px 0px', threshold = 0, ...rest }) => {\n  const [inViewRef, isInView] = useInView({\n    threshold,\n    rootMargin,\n  })\n\n  return (\n    <InViewContext.Provider value={{ isInView: isInView }}>\n      <div ref={inViewRef} {...rest} />\n    </InViewContext.Provider>\n  )\n}\n\nconst InViewContext = React.createContext()\n\nconst useInViewContext = () => {\n  const context = React.useContext(InViewContext)\n  if (context === undefined) {\n    throw new Error('useInViewContext must be used within InViewProvider')\n  }\n  return context\n}\n\nexport { InView, useInViewContext, InViewContext }\n"],"names":["InView","rootMargin","threshold","rest","useInView","inViewRef","isInView","InViewContext","React","createContext","useInViewContext","context","useContext","undefined","Error"],"mappings":";;;;IAGMA,MAAM,GAAG,SAATA,MAAS,OAA0D;AAAA,6BAAvDC,UAAuD;AAAA,MAAvDA,UAAuD,gCAA1C,WAA0C;AAAA,4BAA7BC,SAA6B;AAAA,MAA7BA,SAA6B,+BAAjB,CAAiB;AAAA,MAAXC,IAAW;;AAAA,mBACzCC,SAAS,CAAC;AACtCF,IAAAA,SAAS,EAATA,SADsC;AAEtCD,IAAAA,UAAU,EAAVA;AAFsC,GAAD,CADgC;AAAA;AAAA,MAChEI,SADgE;AAAA,MACrDC,QADqD;;AAMvE,sBACE,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAAEA,MAAAA,QAAQ,EAAEA;AAAZ;AAA/B,kBACE;AAAK,IAAA,GAAG,EAAED;AAAV,KAAyBF,IAAzB,EADF,CADF;AAKD;;IAEKI,aAAa,gBAAGC,KAAK,CAACC,aAAN;;IAEhBC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,MAAMC,OAAO,GAAGH,KAAK,CAACI,UAAN,CAAiBL,aAAjB,CAAhB;;AACA,MAAII,OAAO,KAAKE,SAAhB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,SAAOH,OAAP;AACD;;;;"}